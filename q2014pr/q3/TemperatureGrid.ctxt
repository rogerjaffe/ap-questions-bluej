#BlueJ class context
comment0.params=
comment0.target=TemperatureGrid()
comment0.text=\ Computes\ and\ returns\ a\ new\ temperature\ value\ for\ the\ given\ location.\n\ @param\ row\ a\ valid\ row\ index\ in\ temps\n\ @param\ col\ a\ valid\ column\ index\ in\ temps\n\ @return\ the\ new\ temperature\ for\ temps[row][col]\n\ -\ The\ new\ temperature\ for\ any\ element\ in\ the\ border\ of\ the\ array\ is\ the\n\ same\ as\ the\ old\ temperature.\n\ -\ Otherwise,\ the\ new\ temperature\ is\ the\ average\ of\ the\ four\ adjacent\ entries.\n\ Postcondition\:\ temps\ is\ unchanged.\n
comment1.params=row\ col
comment1.target=double\ computeTemp(int,\ int)
comment1.text=\ Computes\ and\ returns\ a\ new\ temperature\ value\ for\ the\ given\ location.\n\ @param\ row\ a\ valid\ row\ index\ in\ temps\n\ @param\ col\ a\ valid\ column\ index\ in\ temps\n\ @return\ the\ new\ temperature\ for\ temps[row][col]\n\ -\ The\ new\ temperature\ for\ any\ element\ in\ the\ border\ of\ the\ array\ is\ the\n\ same\ as\ the\ old\ temperature.\n\ -\ Otherwise,\ the\ new\ temperature\ is\ the\ average\ of\ the\ four\ adjacent\ entries.\n\ Postcondition\:\ temps\ is\ unchanged.\n
comment2.params=tolerance
comment2.target=boolean\ updateAllTemps(double)
comment2.text=\ Updates\ all\ values\ in\ temps\ and\ returns\ a\ boolean\ that\ indicates\ whether\ or\ not\ all\ the\n\ new\ values\ were\ within\ tolerance\ of\ the\ original\ values.\n\ @param\ tolerance\ a\ double\ value\ >\=\ 0\n\ @return\ true\ if\ all\ updated\ temperatures\ are\ within\ tolerance\ of\ the\ original\ values;\n\ false\ otherwise.\n\ Postcondition\:\ Each\ value\ in\ temps\ has\ been\ updated\ with\ a\ new\ value\ based\ on\ the\n\ corresponding\ call\ to\ computeTemp.\n
comment3.params=
comment3.target=java.lang.String\ toString()
comment3.text=TESTING\ ***********************
comment4.params=args
comment4.target=void\ main(java.lang.String[])
numComments=5
